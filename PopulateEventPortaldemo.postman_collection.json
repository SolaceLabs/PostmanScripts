{
	"info": {
		"_postman_id": "6fb2ae2b-c11f-48f4-be34-960d0fa84bd9",
		"name": "Generate and populate Event Portal demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24825170"
	},
	"item": [
		{
			"name": "Establish Demo Environment for Event Portal",
			"item": [
				{
					"name": "Set Kafka delimiter",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "        {\r\n            \"brokerType\": \"kafka\",\r\n            \"delimiter\": \".\",\r\n            \"type\": \"addressSpace\"\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/architecture/addressSpaces",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"architecture",
								"addressSpaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the sample domain from GitHub",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"epUnmodifiedSampleDomain\", JSON.stringify(pm.response.json()));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var epSampleDomain = pm.environment.get(\"epSampleDomain\");\r",
									"//console.log(epSampleDomain);\r",
									"var epGithubPathToDomainExport = \"\";\r",
									"\r",
									"switch(epSampleDomain){\r",
									"    case \"retail\":\r",
									"        epGithubPathToDomainExport =  \"retail/solace/sample-domain/solace_ep_acmeretail_storeoperations.json\";\r",
									"        break;\r",
									"    case \"retail_kafka\":\r",
									"        epGithubPathToDomainExport =  \"retail/kafka/sample-domain/kafka_ep_acmeretail.json\";\r",
									"        break;\r",
									"    case \"retail_hybrid\":\r",
									"        epGithubPathToDomainExport =  \"retail/hybrid/sample-domain/hybrid_ep_acmeretail.json\";\r",
									"        break;\r",
									"    case \"airline\":\r",
									"        epGithubPathToDomainExport =\"airline/solace/sample-domain/solace_ep_aviation_airlinesOperations.json\";\r",
									"        break;\r",
									"    case \"master-data-management\":\r",
									"        epGithubPathToDomainExport = \"master-data-management/solace/sample-domain/solace_ep_mdm_mdm.json\";\r",
									"        break;\r",
									"    case \"natural-resources\":\r",
									"        epGithubPathToDomainExport =\"natural-resources/solace/sample-domain/solace_ep_natural-resources.json\";\r",
									"        break;\r",
									"    case \"telco\":\r",
									"        epGithubPathToDomainExport =\"telco/kafka/sample-domain/solace_ep_telco_application_domains.json\";\r",
									"        break;\r",
									"    case \"bank\":\r",
									"        epGithubPathToDomainExport =\"banking/kafka/sample-domain/kafka/solace_ep_acmebank_operations.json\";\r",
									"        break;\r",
									"    default:\r",
									"        throw new Error(\"epSample domain set as \" + epSampleDomain + \"which doesn't match any sample in the GitHub repo.\");\r",
									"\r",
									"}\r",
									"\r",
									"//console.log(epGithubPathToDomainExport);\r",
									"pm.collectionVariables.set(\"epGithubPathToDomainExport\", epGithubPathToDomainExport);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://raw.githubusercontent.com/SolaceLabs/event-portal-samples/main/:epGithubPathToDomainExport",
							"protocol": "https",
							"host": [
								"raw",
								"githubusercontent",
								"com"
							],
							"path": [
								"SolaceLabs",
								"event-portal-samples",
								"main",
								":epGithubPathToDomainExport"
							],
							"variable": [
								{
									"key": "epGithubPathToDomainExport",
									"value": "{{epGithubPathToDomainExport}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET R-RBAC roles for enterprise and set variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//GET DOMAIN MANAGER ROLE ID\r",
									"var response = pm.response.json();\r",
									"for(i in response.data){\r",
									"    if(response.data[i].name == \"Domain Manager\"){\r",
									"        pm.collectionVariables.set(\"epStudentRoleId\", response.data[i].id);\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"//SETUP STUDENT ARRAYS\r",
									"var epStudentNamesString = pm.environment.get(\"epStudentNamesEmailsString\");\r",
									"//console.log(\"epStudentNamesString\", epStudentNamesString);\r",
									"var epStudentNamesEmails = JSON.parse(epStudentNamesString);\r",
									"pm.variables.set(\"epStudentNamesEmailsCount\", 0);\r",
									"pm.variables.set(\"epStudentNamesEmails\", epStudentNamesEmails);\r",
									"//console.log(\"epStudentNamesEmails\", epStudentNamesEmails);\r",
									"\r",
									"//make sure page is reset to 1\r",
									"pm.collectionVariables.set(\"epDomainQueryPage\", \"1\");\r",
									"\r",
									"//DETERMINE WHETHER TO CREATE ENVIRONMENTS\r",
									"var epCreateEnvironments = pm.environment.get(\"epCreateEnvironments\");\r",
									"//console.log(\"epCreateEnvironments\", epCreateEnvironments);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"if(epCreateEnvironments == \"true\"){\r",
									"    var epEnvironmentNamesString = pm.environment.get(\"epEnvironmentNamesString\");\r",
									"    var epEnvironmentNames = JSON.parse(epEnvironmentNamesString);\r",
									"    console.log(\"epEnvironmentNames\", epEnvironmentNames);\r",
									"    pm.variables.set(\"epEnvironmentNames\", epEnvironmentNames);\r",
									"    pm.variables.set(\"epEnvironmentNamesCount\", 0);\r",
									"    postman.setNextRequest(\"Create an Environment\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Get the environment objects\");\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.solace.cloud/api/v0/iam/authz/rrbac/roles/",
							"protocol": "https",
							"host": [
								"api",
								"solace",
								"cloud"
							],
							"path": [
								"api",
								"v0",
								"iam",
								"authz",
								"rrbac",
								"roles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"if(pm.variables.has(\"epEnvironmentIds\")){\r",
									"    var epEnvironmentIds = pm.variables.get(\"epEnvironmentIds\");\r",
									"}else{\r",
									"    var epEnvironmentIds = [];\r",
									"}\r",
									"\r",
									"\r",
									"epEnvironmentIds.push(response.data.id);\r",
									"\r",
									"\r",
									"pm.variables.set(\"epEnvironmentIds\", epEnvironmentIds);\r",
									"//console.log(\"epEnvironmentIds\", epEnvironmentIds);\r",
									"\r",
									"\r",
									"//figure out whether to loop again\r",
									"if(pm.variables.has(\"epEnvironmentNames\")){\r",
									"    epEnvironmentNames = pm.variables.get(\"epEnvironmentNames\");\r",
									"    epEnvironmentNamesCount = pm.variables.get(\"epEnvironmentNamesCount\");\r",
									"    epEnvironmentNamesCount++;\r",
									"    if(epEnvironmentNamesCount < epEnvironmentNames.length){\r",
									"        //console.log(\"count\", epEnvironmentNamesCount, epEnvironmentNames.length);\r",
									"        pm.variables.set(\"epEnvironmentNamesCount\", epEnvironmentNamesCount);\r",
									"        postman.setNextRequest(\"Create an Environment\");\r",
									"    }else{\r",
									"        postman.setNextRequest(\"Create new user\");\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.variables.has(\"epEnvironmentNames\")){\r",
									"    var epEnvironmentNamesCount = pm.variables.get(\"epEnvironmentNamesCount\");\r",
									"    var epEnvironmentNames  = pm.variables.get(\"epEnvironmentNames\");\r",
									"    var epEnvironmentName = epEnvironmentNames[epEnvironmentNamesCount];\r",
									"\r",
									"    //console.log(\"epEnvironmentNames\",epEnvironmentNames );\r",
									"    //console.log(\"epEnvironmentNamesCount\", epEnvironmentNamesCount);\r",
									"    //console.log(\"epEnvironmentName\", epEnvironmentName );\r",
									"    pm.collectionVariables.set(\"epEnvironmentName\", epEnvironmentName);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{epEnvironmentName}}\",\r\n    \"description\": \"{{epEnterpriseName}} {{epEnterpriseName}} Environment\",\r\n    \"type\": \"environment\",\r\n    \"configPush\":\"enabled\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{solaceCloudBaseUrl}}/api/v2/platform/environments",
							"protocol": "https",
							"host": [
								"{{solaceCloudBaseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"platform",
								"environments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the environment objects",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//console.log(\"now getting environments\");\r",
									"\r",
									"if(pm.variables.has(\"epStudentNames\")){\r",
									"    var epStudentNames = pm.variables.get(\"epStudentNames\");\r",
									"    var epStudentNamesCount = pm.variables.get(\"epStudentNamesCount\");\r",
									"\r",
									" //   console.log(\"epStudentNames\",epStudentNames );\r",
									"  //  console.log(\"epStudentNamesCount\",epStudentNamesCount );\r",
									"  //  console.log(\"epStudentNames[epStudentNamesCount]\", epStudentNames[epStudentNamesCount]);\r",
									"\r",
									"    pm.collectionVariables.set(\"epStudentName\", epStudentNames[epStudentNamesCount]);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"var epEnvironmentIds = [];\r",
									"var epEnvironmentNames = [];\r",
									"\r",
									"for(var i=0; i < response.data.length; i++){\r",
									"    if(response.data[i].name != \"Default\" ){\r",
									"        epEnvironmentIds.push(response.data[i].id);\r",
									"        epEnvironmentNames.push(response.data[i].name);\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.variables.set(\"epEnvironmentIds\", epEnvironmentIds);\r",
									"pm.variables.set(\"epEnvironmentNames\", epEnvironmentNames);\r",
									"\r",
									"console.log(\"epEnvironmentIds\", epEnvironmentIds);\r",
									"console.log(\"epEnvironmentNames\", epEnvironmentNames);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=UTF-8"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/architecture/environments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"architecture",
								"environments"
							],
							"query": [
								{
									"key": "pageSize",
									"value": "20",
									"description": "The number of events to get per page.",
									"disabled": true
								},
								{
									"key": "pageNumber",
									"value": "1",
									"description": "The page number to get.",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "reprehenderit aliquip exercitation",
									"disabled": true
								},
								{
									"key": "like",
									"value": "reprehenderit aliquip exercitation",
									"disabled": true
								}
							]
						},
						"description": "Use this API to list all environments."
					},
					"response": [
						{
							"name": "Retrieve a list of environments and the accompanying metadata.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/environments?pageSize=20&pageNumber=1&sort=reprehenderit aliquip exercitation&like=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"environments"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "like",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"meta\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n}"
						},
						{
							"name": "Bad Request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/environments?pageSize=20&pageNumber=1&sort=reprehenderit aliquip exercitation&like=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"environments"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "like",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Unauthorized.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/environments?pageSize=20&pageNumber=1&sort=reprehenderit aliquip exercitation&like=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"environments"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "like",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Forbidden.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/environments?pageSize=20&pageNumber=1&sort=reprehenderit aliquip exercitation&like=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"environments"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "like",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/environments?pageSize=20&pageNumber=1&sort=reprehenderit aliquip exercitation&like=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"environments"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "like",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Method Not Allowed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/environments?pageSize=20&pageNumber=1&sort=reprehenderit aliquip exercitation&like=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"environments"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "like",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Internal Server Error.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/environments?pageSize=20&pageNumber=1&sort=reprehenderit aliquip exercitation&like=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"environments"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "like",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Implemented",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/environments?pageSize=20&pageNumber=1&sort=reprehenderit aliquip exercitation&like=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"environments"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "like",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Not Implemented",
							"code": 501,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Service Unavailable.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/environments?pageSize=20&pageNumber=1&sort=reprehenderit aliquip exercitation&like=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"environments"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "like",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Gateway Timeout.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/environments?pageSize=20&pageNumber=1&sort=reprehenderit aliquip exercitation&like=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"environments"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "like",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Gateway Timeout",
							"code": 504,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Create new user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//console.log (\"Create New User  prescript\");\r",
									"if(pm.variables.has(\"epStudentNamesEmails\")){\r",
									"//    console.log(\"Running as collection, override collection variables.\")\r",
									"    var epStudentNamesEmails = pm.variables.get(\"epStudentNamesEmails\");\r",
									"    var epStudentNamesEmailsCount = pm.variables.get(\"epStudentNamesEmailsCount\");\r",
									"\r",
									"//    console.log(\"epStudentNamesEmails\",epStudentNamesEmails );\r",
									"//    console.log(\"epStudentNamesEmailsCount\",epStudentNamesEmailsCount );\r",
									"    var epStudentName = epStudentNamesEmails[epStudentNamesEmailsCount].epStudentFirstName + \" \" + epStudentNamesEmails[epStudentNamesEmailsCount].epStudentLastName;\r",
									"//    console.log(\"epStudentName\", epStudentName);\r",
									"    pm.collectionVariables.set(\"epStudentName\", epStudentName);\r",
									"pm.collectionVariables.set(\"epStudentFirstName\", epStudentNamesEmails[epStudentNamesEmailsCount].epStudentFirstName);\r",
									"pm.collectionVariables.set(\"epStudentLastName\", epStudentNamesEmails[epStudentNamesEmailsCount].epStudentLastName);\r",
									"pm.collectionVariables.set(\"epStudentEmail\", epStudentNamesEmails[epStudentNamesEmailsCount].epStudentEmail);\r",
									"}else{\r",
									"    console.log(\"Not running as collection, using standard collection variables.\")\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"//console.log(response);\r",
									"//console.log(response.data.userId);\r",
									"pm.collectionVariables.set(\"epStudentUserId\", response.data.userId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"type\": \"user\",\r\n            \"firstName\": \"{{epStudentFirstName}}\",\r\n            \"lastName\": \"{{epStudentLastName}}\",\r\n            \"email\": \"{{epStudentEmail}}\",\r\n            \"tipsEmails\": false,\r\n            \"jobTitle\": \"ARCHITECT\",\r\n            \"roles\": [\r\n                \"event-portal-user\",\r\n                \"messaging-service-viewer\"\r\n            ],\r\n            \"userAttributes\": {},\r\n            \"state\": \"ACTIVE\"\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseUrl}}/api/v0/users",
							"protocol": "https",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v0",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Import application domains and their entities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//delay to allow for import to complete before moving onward\r",
									"  let moment = require(\"moment\")\r",
									"  console.log(\"In delay to allow import to complete:\", moment())\r",
									"\r",
									"  setTimeout(function () { console.log(\"after:\", moment()) }, 30000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var epUnmodifiedSampleDomain = JSON.parse(pm.collectionVariables.get(\"epUnmodifiedSampleDomain\"));\r",
									"var epStudentName = pm.collectionVariables.get(\"epStudentName\");\r",
									"\r",
									"\r",
									"for(i in epUnmodifiedSampleDomain.applicationDomains){\r",
									" //   epUnmodifiedSampleDomain.applicationDomains[i].name = epStudentName + \"-\" + epUnmodifiedSampleDomain.applicationDomains[i].name;\r",
									"    epUnmodifiedSampleDomain.applicationDomains[i].name =  epUnmodifiedSampleDomain.applicationDomains[i].name.replace(\" \", \"\");\r",
									"    epUnmodifiedSampleDomain.applicationDomains[i].description = epStudentName;\r",
									"};\r",
									"\r",
									"//console.log(epUnmodifiedSampleDomain);\r",
									"\r",
									"pm.collectionVariables.set(\"epCustomizedDomainExport\", JSON.stringify(epUnmodifiedSampleDomain));\r",
									"\r",
									"/* if(pm.variables.has(\"epStudentNamesEmails\")){\r",
									"    var epStudentNamesEmails = pm.variables.get(\"epStudentNamesEmails\");\r",
									"    var epStudentNamesEmailsCount = pm.variables.get(\"epStudentNamesEmailsCount\");\r",
									"\r",
									"    console.log(\"epStudentNamesEmails\",epStudentNamesEmails );\r",
									"    console.log(\"epStudentNamesEmailsCount\",epStudentNamesEmailsCount );\r",
									"    var epStudentName = epStudentNamesEmails[epStudentNamesEmailsCount].epStudentFirstName + \" \" + epStudentNamesEmails[epStudentNamesEmailsCount].epStudentLastName;\r",
									"    console.log(\"epStudentName\", epStudentName);\r",
									"    pm.collectionVariables.set(\"epStudentName\", epStudentName);\r",
									"} */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{epCustomizedDomainExport}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains/import",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"architecture",
								"applicationDomains",
								"import"
							]
						},
						"description": "Use this API to import application domains and their nested entities. Please note that this endpoint is in beta and could be subject to change in the future"
					},
					"response": [
						{
							"name": "Successfully registered import job with location identified in the response header",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"formatVersion\": \"ut dolore cupidatat\",\n  \"applicationDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"topicDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applications\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applicationVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"events\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemas\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemaVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enums\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enumVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApis\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProducts\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProductVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"addressSpaces\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains/import",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains",
										"import"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad Request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"formatVersion\": \"ut dolore cupidatat\",\n  \"applicationDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"topicDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applications\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applicationVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"events\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemas\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemaVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enums\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enumVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApis\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProducts\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProductVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"addressSpaces\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains/import",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains",
										"import"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Unauthorized.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"formatVersion\": \"ut dolore cupidatat\",\n  \"applicationDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"topicDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applications\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applicationVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"events\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemas\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemaVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enums\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enumVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApis\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProducts\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProductVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"addressSpaces\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains/import",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains",
										"import"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Forbidden.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"formatVersion\": \"ut dolore cupidatat\",\n  \"applicationDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"topicDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applications\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applicationVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"events\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemas\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemaVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enums\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enumVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApis\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProducts\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProductVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"addressSpaces\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains/import",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains",
										"import"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Found.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"formatVersion\": \"ut dolore cupidatat\",\n  \"applicationDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"topicDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applications\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applicationVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"events\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemas\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemaVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enums\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enumVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApis\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProducts\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProductVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"addressSpaces\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains/import",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains",
										"import"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Method Not Allowed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"formatVersion\": \"ut dolore cupidatat\",\n  \"applicationDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"topicDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applications\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applicationVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"events\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemas\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemaVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enums\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enumVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApis\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProducts\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProductVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"addressSpaces\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains/import",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains",
										"import"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Internal Server Error.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"formatVersion\": \"ut dolore cupidatat\",\n  \"applicationDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"topicDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applications\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applicationVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"events\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemas\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemaVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enums\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enumVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApis\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProducts\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProductVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"addressSpaces\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains/import",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains",
										"import"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Implemented",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"formatVersion\": \"ut dolore cupidatat\",\n  \"applicationDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"topicDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applications\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applicationVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"events\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemas\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemaVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enums\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enumVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApis\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProducts\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProductVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"addressSpaces\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains/import",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains",
										"import"
									]
								}
							},
							"status": "Not Implemented",
							"code": 501,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Service Unavailable.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"formatVersion\": \"ut dolore cupidatat\",\n  \"applicationDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"topicDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applications\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applicationVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"events\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemas\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemaVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enums\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enumVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApis\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProducts\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProductVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"addressSpaces\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains/import",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains",
										"import"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Gateway Timeout.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"formatVersion\": \"ut dolore cupidatat\",\n  \"applicationDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"topicDomains\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applications\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"applicationVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"events\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemas\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"schemaVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enums\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"enumVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApis\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProducts\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventApiProductVersions\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"addressSpaces\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains/import",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains",
										"import"
									]
								}
							},
							"status": "Gateway Timeout",
							"code": 504,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Get the student application domains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"if(response.meta.pagination.pageNumber == 1){\r",
									"    var epStudentDomainIds = [];\r",
									"}else{\r",
									"    epStudentDomainIds = pm.variables.get(\"epStudentDomainIds\");\r",
									"}\r",
									"\r",
									"var epStudentName = pm.collectionVariables.get(\"epStudentName\");\r",
									"\r",
									"\r",
									"//console.log(\"epStudentName\", epStudentName);\r",
									"\r",
									"//push domains that match the student's name into an array\r",
									"for(var i=0; i < response.data.length; i++){\r",
									"    if(response.data[i].description == epStudentName ){\r",
									"        epStudentDomainIds.push(response.data[i].id);\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.variables.set(\"epStudentDomainIds\", epStudentDomainIds);\r",
									"\r",
									"//see if we need to loop back again\r",
									"if(response.meta.pagination.nextPage == null){\r",
									"    pm.variables.set(\"epStudentDomainIdCount\", 0);\r",
									"    pm.collectionVariables.set(\"epDomainQueryPage\", 1);\r",
									"} else {\r",
									"    console.log(\"more pages\");\r",
									"    pm.collectionVariables.set(\"epDomainQueryPage\", response.meta.pagination.nextPage);\r",
									"    postman.setNextRequest(\"Get the student application domains\");\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=UTF-8"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains?pageSize=100&pageNumber={{epDomainQueryPage}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"architecture",
								"applicationDomains"
							],
							"query": [
								{
									"key": "pageSize",
									"value": "100",
									"description": "The number of application domains to get per page."
								},
								{
									"key": "pageNumber",
									"value": "{{epDomainQueryPage}}",
									"description": "The page number to get."
								},
								{
									"key": "name",
									"value": "reprehenderit aliquip exercitation",
									"description": "Name to be used to match the application domain.",
									"disabled": true
								},
								{
									"key": "ids",
									"value": "dolore sunt irure",
									"description": "Match only application domains with the given IDs separated by commas.",
									"disabled": true
								},
								{
									"key": "ids",
									"value": "quis",
									"description": "Match only application domains with the given IDs separated by commas.",
									"disabled": true
								},
								{
									"key": "include",
									"value": "dolore sunt irure",
									"description": "Specify extra data to be included, options are: stats",
									"disabled": true
								},
								{
									"key": "include",
									"value": "quis",
									"description": "Specify extra data to be included, options are: stats",
									"disabled": true
								}
							]
						},
						"description": "Use this API to retrieve a list of application domains that match the given parameters."
					},
					"response": [
						{
							"name": "Retrieve a list of application domains and the accompanying metadata.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&include=velit irure eiusmod dolore&include=culpa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "include",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "include",
											"value": "culpa"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"meta\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n}"
						},
						{
							"name": "Bad Request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&include=velit irure eiusmod dolore&include=culpa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "include",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "include",
											"value": "culpa"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Unauthorized.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&include=velit irure eiusmod dolore&include=culpa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "include",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "include",
											"value": "culpa"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Forbidden.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&include=velit irure eiusmod dolore&include=culpa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "include",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "include",
											"value": "culpa"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&include=velit irure eiusmod dolore&include=culpa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "include",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "include",
											"value": "culpa"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Method Not Allowed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&include=velit irure eiusmod dolore&include=culpa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "include",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "include",
											"value": "culpa"
										}
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Internal Server Error.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&include=velit irure eiusmod dolore&include=culpa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "include",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "include",
											"value": "culpa"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Implemented",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&include=velit irure eiusmod dolore&include=culpa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "include",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "include",
											"value": "culpa"
										}
									]
								}
							},
							"status": "Not Implemented",
							"code": 501,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Service Unavailable.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&include=velit irure eiusmod dolore&include=culpa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "include",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "include",
											"value": "culpa"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Gateway Timeout.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationDomains?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&include=velit irure eiusmod dolore&include=culpa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationDomains"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "include",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "include",
											"value": "culpa"
										}
									]
								}
							},
							"status": "Gateway Timeout",
							"code": 504,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Add RBAC role for domain to user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.variables.has(\"epStudentDomainIds\")){\r",
									"    var epStudentDomainIds = pm.variables.get(\"epStudentDomainIds\");\r",
									"    var epStudentDomainIdCount = pm.variables.get(\"epStudentDomainIdCount\");\r",
									"\r",
									"// console.log(\"epStudentDomainIds\",epStudentDomainIds );\r",
									"//    console.log(\"epStudentDomainIdCount\",epStudentDomainIdCount );\r",
									"\r",
									"    pm.collectionVariables.set(\"epApplicationDomainId\", epStudentDomainIds[epStudentDomainIdCount]);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//figure out whether to loop again\r",
									"if(pm.variables.has(\"epStudentDomainIds\")){\r",
									"    epStudentDomainIds = pm.variables.get(\"epStudentDomainIds\");\r",
									"    epStudentDomainIdCount = pm.variables.get(\"epStudentDomainIdCount\");\r",
									"    epStudentDomainIdCount++;\r",
									"    if(epStudentDomainIdCount < epStudentDomainIds.length){\r",
									"//        console.log(\"count\", epStudentDomainIdCount, epStudentDomainIds.length);\r",
									"        pm.variables.set(\"epStudentDomainIdCount\", epStudentDomainIdCount);\r",
									"        postman.setNextRequest(\"Add RBAC role for domain to user\");\r",
									"    }else{\r",
									"    pm.variables.set(\"epStudentDomainIdCount\", 0);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"attributeValues\": {\r\n    \"id\":\"{{epApplicationDomainId}}\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.solace.cloud/api/v0/iam/authz/rrbac/users/:userId/roles/:roleId",
							"protocol": "https",
							"host": [
								"api",
								"solace",
								"cloud"
							],
							"path": [
								"api",
								"v0",
								"iam",
								"authz",
								"rrbac",
								"users",
								":userId",
								"roles",
								":roleId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{epStudentUserId}}"
								},
								{
									"key": "roleId",
									"value": "{{epStudentRoleId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gets the application objects for domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"if(pm.variables.has(\"epStudentApplicationIds\")){\r",
									"    var epStudentApplicationIds = pm.variables.get(\"epStudentApplicationIds\");\r",
									"    var epStudentApplicationBrokerTypes = pm.variables.get(\"epStudentApplicationBrokerTypes\");\r",
									"    var epStudentApplicationNames = pm.variables.get(\"epStudentApplicationNames\");\r",
									"    var epDistinctBrokerTypes = pm.variables.get(\"epDistinctBrokerTypes\");\r",
									"}else{\r",
									"    var epStudentApplicationIds = [];\r",
									"    var epStudentApplicationBrokerTypes = [];\r",
									"    var epDistinctBrokerTypes = [];\r",
									"    var epStudentApplicationNames = [];\r",
									"}\r",
									"\r",
									"for(var i=0; i < response.data.length; i++){\r",
									"//        console.log(\"in the application for loop\");\r",
									"//        console.log(response.data[i].id);\r",
									"//        console.log(response.data[i].brokerType);\r",
									"//        console.log(epDistinctBrokerTypes.indexOf(response.data[i].brokerType));\r",
									"        epStudentApplicationIds.push(response.data[i].id);\r",
									"        epStudentApplicationBrokerTypes.push(response.data[i].brokerType);\r",
									"        epStudentApplicationNames.push(response.data[i].name);    \r",
									"        if (epDistinctBrokerTypes.indexOf(response.data[i].brokerType) == -1){\r",
									"            epDistinctBrokerTypes.push(response.data[i].brokerType);\r",
									"        };\r",
									"}\r",
									"\r",
									"pm.variables.set(\"epStudentApplicationIds\", epStudentApplicationIds);\r",
									"pm.variables.set(\"epStudentApplicationBrokerTypes\", epStudentApplicationBrokerTypes);\r",
									"pm.variables.set(\"epDistinctBrokerTypes\", epDistinctBrokerTypes);\r",
									"pm.variables.set(\"epStudentApplicationNames\", epStudentApplicationNames);\r",
									"\r",
									"\r",
									"//console.log(\"epStudentApplicationIds\", epStudentApplicationIds);\r",
									"//console.log(\"epStudentApplicationBrokerTypes\", epStudentApplicationBrokerTypes);\r",
									"\r",
									"//figure out whether to loop again\r",
									"if(pm.variables.has(\"epStudentDomainIds\")){\r",
									"    epStudentDomainIds = pm.variables.get(\"epStudentDomainIds\");\r",
									"    epStudentDomainIdCount = pm.variables.get(\"epStudentDomainIdCount\");\r",
									"    epStudentDomainIdCount++;\r",
									"    if(epStudentDomainIdCount < epStudentDomainIds.length){\r",
									"//        console.log(\"count\", epStudentDomainIdCount, epStudentDomainIds.length);\r",
									"        pm.variables.set(\"epStudentDomainIdCount\", epStudentDomainIdCount);\r",
									"        postman.setNextRequest(\"Gets the application objects for domain\");\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.variables.set(\"epStudentApplicationIdCount\", 0);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//console.log(\"in get application objects prescript\");\r",
									"\r",
									"\r",
									"if(pm.variables.has(\"epStudentDomainIdCount\")){\r",
									"//    console.log(\"running as collection, override collection variable\");\r",
									"    var epStudentDomainIds = pm.variables.get(\"epStudentDomainIds\");\r",
									"    var epStudentDomainIdCount = pm.variables.get(\"epStudentDomainIdCount\");\r",
									"\r",
									" //console.log(\"epStudentDomainIds\",epStudentDomainIds );\r",
									"//    console.log(\"epStudentDomainIdCount\",epStudentDomainIdCount );\r",
									"\r",
									"    pm.collectionVariables.set(\"epApplicationDomainId\", epStudentDomainIds[epStudentDomainIdCount]);\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=UTF-8"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/architecture/applications?pageSize=100&applicationDomainId={{epApplicationDomainId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"architecture",
								"applications"
							],
							"query": [
								{
									"key": "pageSize",
									"value": "100",
									"description": "The number of applications to get per page."
								},
								{
									"key": "pageNumber",
									"value": "1",
									"description": "The page number to get.",
									"disabled": true
								},
								{
									"key": "name",
									"value": "reprehenderit aliquip exercitation",
									"description": "Name of the application to match on.",
									"disabled": true
								},
								{
									"key": "applicationDomainId",
									"value": "{{epApplicationDomainId}}",
									"description": "Match only applications in the given application domain."
								},
								{
									"key": "ids",
									"value": "dolore sunt irure",
									"description": "Match only applications with the given IDs separated by commas.",
									"disabled": true
								},
								{
									"key": "ids",
									"value": "quis",
									"description": "Match only applications with the given IDs separated by commas.",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "reprehenderit aliquip exercitation",
									"description": "Sort based on the provided parameters. <br> The value can either be a standalone field name (`?sort=<field>`) or a field and direction, which must be delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
									"disabled": true
								},
								{
									"key": "customAttributes",
									"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`",
									"description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
									"disabled": true
								},
								{
									"key": "applicationType",
									"value": "reprehenderit aliquip exercitation",
									"description": "Match only applications with the given applicationType.",
									"disabled": true
								}
							]
						},
						"description": "Use this API to retrieve a list of applications that match the given parameters."
					},
					"response": [
						{
							"name": "Retrieve a list of applications and the accompanying metadata.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applications?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&applicationDomainId=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&sort=reprehenderit aliquip exercitation&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`&applicationType=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applications"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "applicationDomainId",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										},
										{
											"key": "applicationType",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"meta\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n}"
						},
						{
							"name": "Bad Request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applications?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&applicationDomainId=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&sort=reprehenderit aliquip exercitation&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`&applicationType=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applications"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "applicationDomainId",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										},
										{
											"key": "applicationType",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Unauthorized.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applications?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&applicationDomainId=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&sort=reprehenderit aliquip exercitation&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`&applicationType=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applications"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "applicationDomainId",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										},
										{
											"key": "applicationType",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Forbidden.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applications?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&applicationDomainId=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&sort=reprehenderit aliquip exercitation&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`&applicationType=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applications"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "applicationDomainId",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										},
										{
											"key": "applicationType",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applications?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&applicationDomainId=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&sort=reprehenderit aliquip exercitation&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`&applicationType=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applications"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "applicationDomainId",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										},
										{
											"key": "applicationType",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Method Not Allowed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applications?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&applicationDomainId=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&sort=reprehenderit aliquip exercitation&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`&applicationType=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applications"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "applicationDomainId",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										},
										{
											"key": "applicationType",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Internal Server Error.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applications?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&applicationDomainId=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&sort=reprehenderit aliquip exercitation&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`&applicationType=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applications"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "applicationDomainId",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										},
										{
											"key": "applicationType",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Implemented",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applications?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&applicationDomainId=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&sort=reprehenderit aliquip exercitation&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`&applicationType=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applications"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "applicationDomainId",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										},
										{
											"key": "applicationType",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Not Implemented",
							"code": 501,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Service Unavailable.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applications?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&applicationDomainId=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&sort=reprehenderit aliquip exercitation&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`&applicationType=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applications"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "applicationDomainId",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										},
										{
											"key": "applicationType",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Gateway Timeout.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applications?pageSize=20&pageNumber=1&name=reprehenderit aliquip exercitation&applicationDomainId=reprehenderit aliquip exercitation&ids=velit irure eiusmod dolore&ids=culpa&sort=reprehenderit aliquip exercitation&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`&applicationType=reprehenderit aliquip exercitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applications"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "name",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "applicationDomainId",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "sort",
											"value": "reprehenderit aliquip exercitation"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										},
										{
											"key": "applicationType",
											"value": "reprehenderit aliquip exercitation"
										}
									]
								}
							},
							"status": "Gateway Timeout",
							"code": 504,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Get latest application version object for application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.variables.has(\"epStudentApplicationIds\")){\r",
									"    var epStudentApplicationIds = pm.variables.get(\"epStudentApplicationIds\");\r",
									"    var epStudentApplicationIdCount = pm.variables.get(\"epStudentApplicationIdCount\");\r",
									"\r",
									"//    console.log(\"epStudentApplicationIds\",epStudentApplicationIds );\r",
									"//    console.log(\"epStudentApplicationIdCount\",epStudentApplicationIdCount );\r",
									"//    console.log(\"current application id\", epStudentApplicationIds[epStudentApplicationIdCount] );\r",
									"    pm.collectionVariables.set(\"epApplicationId\", epStudentApplicationIds[epStudentApplicationIdCount]);\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"if(pm.variables.has(\"epStudentApplicationVersionIds\")){\r",
									"    var epStudentApplicationVersionIds = pm.variables.get(\"epStudentApplicationVersionIds\");\r",
									"    var epApplicationToTopicMap = pm.variables.get(\"epApplicationToTopicMap\");\r",
									"    var epApplicationToConsumerGroupsMap = pm.variables.get(\"epApplicationToConsumerGroupsMap\");\r",
									"    var epQueueConsumerIds = pm.variables.get(\"epQueueConsumerIds\");\r",
									"    var epQueueConsumerNames = pm.variables.get(\"epQueueConsumerNames\");\r",
									"\r",
									"}else{\r",
									"    var epApplicationToTopicMap = [];\r",
									"    var epStudentApplicationVersionIds = [];\r",
									"    var epApplicationToConsumerGroupsMap = [];\r",
									"    var epQueueConsumerIds = [];\r",
									"    var epQueueConsumerNames = [];\r",
									"}\r",
									"\r",
									"//only get latest application version\r",
									"epStudentApplicationVersionIds.push(response.data[0].id);\r",
									"\r",
									"//console.log(\"response.data.consumers\", response.data[0].consumers);\r",
									"var tempTopicArray = [];\r",
									"var tempConsumerArray = [];\r",
									"\r",
									"for(var i=0; i < response.data[0].consumers.length; i++){\r",
									"    tempTopicArray.push(response.data[0].consumers[i].subscriptions[0].value);\r",
									"    tempConsumerArray.push(response.data[0].consumers[i].name);\r",
									"    if(response.data[0].consumers[i].consumerType == \"eventQueue\"){\r",
									"        epQueueConsumerIds.push(response.data[0].consumers[i].id);\r",
									"        epQueueConsumerNames.push(response.data[0].consumers[i].name);\r",
									"    }\r",
									"}\r",
									"        \r",
									"\r",
									"\r",
									";\r",
									"epApplicationToTopicMap.push(tempTopicArray.join(\"|\"));\r",
									"epApplicationToConsumerGroupsMap.push(tempConsumerArray.join(\"|\"));\r",
									"\r",
									"pm.variables.set(\"epStudentApplicationVersionIds\", epStudentApplicationVersionIds);\r",
									"pm.variables.set(\"epApplicationToTopicMap\", epApplicationToTopicMap);\r",
									"pm.variables.set(\"epApplicationToConsumerGroupsMap\", epApplicationToConsumerGroupsMap);\r",
									"pm.variables.set(\"epQueueConsumerIds\", epQueueConsumerIds);\r",
									"pm.variables.set(\"epQueueConsumerNames\", epQueueConsumerNames);\r",
									"\r",
									"console.log(\"epQueueConsumerIds\", epQueueConsumerIds);\r",
									"\r",
									"\r",
									"//figure out whether to loop again\r",
									"if(pm.variables.has(\"epStudentApplicationIds\")){\r",
									"    epStudentApplicationIds = pm.variables.get(\"epStudentApplicationIds\");\r",
									"    epStudentApplicationIdCount = pm.variables.get(\"epStudentApplicationIdCount\");\r",
									"    epStudentApplicationIdCount++;\r",
									"    \r",
									"    if(epStudentApplicationIdCount < epStudentApplicationIds.length){\r",
									"//        console.log(\"count\", epStudentApplicationIdCount, epStudentApplicationIds.length);\r",
									"        pm.variables.set(\"epStudentApplicationIdCount\", epStudentApplicationIdCount);\r",
									"        postman.setNextRequest(\"Get latest application version object for application\");\r",
									"    }else{\r",
									"        console.log(\"student app versions leaving\",epStudentApplicationVersionIds);\r",
									"        console.log(\"queues\", epApplicationToTopicMap);\r",
									"        console.log(\"subscriptions\", epApplicationToConsumerGroupsMap);\r",
									"        pm.variables.set(\"epEnvironmentIdCount\", 0);\r",
									"        pm.variables.set(\"epDistinctBrokerTypesCount\", 0);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json;charset=UTF-8"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions?applicationIds={{epApplicationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"architecture",
								"applicationVersions"
							],
							"query": [
								{
									"key": "pageSize",
									"value": "20",
									"description": "The number of application versions to get per page.",
									"disabled": true
								},
								{
									"key": "pageNumber",
									"value": "1",
									"description": "The page number to get.",
									"disabled": true
								},
								{
									"key": "applicationIds",
									"value": "{{epApplicationId}}",
									"description": "Match only application versions of these application IDs, separated by commas."
								},
								{
									"key": "applicationIds",
									"value": "quis",
									"description": "Match only application versions of these application IDs, separated by commas.",
									"disabled": true
								},
								{
									"key": "ids",
									"value": "dolore sunt irure",
									"description": "Match only application versions with the given IDs, separated by commas.",
									"disabled": true
								},
								{
									"key": "ids",
									"value": "quis",
									"description": "Match only application versions with the given IDs, separated by commas.",
									"disabled": true
								},
								{
									"key": "customAttributes",
									"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`",
									"description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
									"disabled": true
								}
							]
						},
						"description": "Use this API to retrieve a list of application versions that match the given parameters."
					},
					"response": [
						{
							"name": "Retrieve a list of application versions and the accompanying metadata.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions?pageSize=20&pageNumber=1&applicationIds=velit irure eiusmod dolore&applicationIds=culpa&ids=velit irure eiusmod dolore&ids=culpa&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "applicationIds",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "applicationIds",
											"value": "culpa"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"meta\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n}"
						},
						{
							"name": "Bad Request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions?pageSize=20&pageNumber=1&applicationIds=velit irure eiusmod dolore&applicationIds=culpa&ids=velit irure eiusmod dolore&ids=culpa&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "applicationIds",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "applicationIds",
											"value": "culpa"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Unauthorized.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions?pageSize=20&pageNumber=1&applicationIds=velit irure eiusmod dolore&applicationIds=culpa&ids=velit irure eiusmod dolore&ids=culpa&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "applicationIds",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "applicationIds",
											"value": "culpa"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Forbidden.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions?pageSize=20&pageNumber=1&applicationIds=velit irure eiusmod dolore&applicationIds=culpa&ids=velit irure eiusmod dolore&ids=culpa&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "applicationIds",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "applicationIds",
											"value": "culpa"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions?pageSize=20&pageNumber=1&applicationIds=velit irure eiusmod dolore&applicationIds=culpa&ids=velit irure eiusmod dolore&ids=culpa&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "applicationIds",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "applicationIds",
											"value": "culpa"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Method Not Allowed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions?pageSize=20&pageNumber=1&applicationIds=velit irure eiusmod dolore&applicationIds=culpa&ids=velit irure eiusmod dolore&ids=culpa&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "applicationIds",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "applicationIds",
											"value": "culpa"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										}
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Internal Server Error.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions?pageSize=20&pageNumber=1&applicationIds=velit irure eiusmod dolore&applicationIds=culpa&ids=velit irure eiusmod dolore&ids=culpa&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "applicationIds",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "applicationIds",
											"value": "culpa"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Implemented",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions?pageSize=20&pageNumber=1&applicationIds=velit irure eiusmod dolore&applicationIds=culpa&ids=velit irure eiusmod dolore&ids=culpa&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "applicationIds",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "applicationIds",
											"value": "culpa"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										}
									]
								}
							},
							"status": "Not Implemented",
							"code": 501,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Service Unavailable.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions?pageSize=20&pageNumber=1&applicationIds=velit irure eiusmod dolore&applicationIds=culpa&ids=velit irure eiusmod dolore&ids=culpa&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "applicationIds",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "applicationIds",
											"value": "culpa"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Gateway Timeout.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions?pageSize=20&pageNumber=1&applicationIds=velit irure eiusmod dolore&applicationIds=culpa&ids=velit irure eiusmod dolore&ids=culpa&customAttributes=searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "pageNumber",
											"value": "1"
										},
										{
											"key": "applicationIds",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "applicationIds",
											"value": "culpa"
										},
										{
											"key": "ids",
											"value": "velit irure eiusmod dolore"
										},
										{
											"key": "ids",
											"value": "culpa"
										},
										{
											"key": "customAttributes",
											"value": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
										}
									]
								}
							},
							"status": "Gateway Timeout",
							"code": 504,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Create event mesh populated with application versions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.variables.has(\"epEnvironmentIds\")){\r",
									"    //GET ENVIRONMENT ID AND NAME\r",
									"    var epEnvironmentIds = pm.variables.get(\"epEnvironmentIds\");\r",
									"    var epEnvironmentIdCount = pm.variables.get(\"epEnvironmentIdCount\");\r",
									"    var epEnvironmentId = epEnvironmentIds[epEnvironmentIdCount];\r",
									"    var epEnvironmentNames  = pm.variables.get(\"epEnvironmentNames\");\r",
									"    var epEnvironmentName = epEnvironmentNames[epEnvironmentIdCount];\r",
									"\r",
									"    //GET CURRENT BROKER TYPE\r",
									"    var epDistinctBrokerTypes = pm.variables.get(\"epDistinctBrokerTypes\");   \r",
									"    var epDistinctBrokerTypesCount = pm.variables.get(\"epDistinctBrokerTypesCount\");\r",
									"    var epBrokerType = epDistinctBrokerTypes[epDistinctBrokerTypesCount];\r",
									"\r",
									"    //GET STUDENT NAME\r",
									"     var epStudentName = pm.variables.get(\"epStudentName\");\r",
									"\r",
									"    pm.collectionVariables.set(\"epEnvironmentId\", epEnvironmentId);\r",
									"    pm.collectionVariables.set(\"epStudentName\", epStudentName);\r",
									"    pm.collectionVariables.set(\"epBrokerType\", epBrokerType);\r",
									"    pm.collectionVariables.set(\"epEnvironmentName\", epEnvironmentName);\r",
									"\r",
									"    pm.variables.set(\"currentBrokerType\", epBrokerType);\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//capture EventMeshIds\r",
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"var  currentBrokerType= pm.variables.get(\"currentBrokerType\");\r",
									"if(currentBrokerType == \"kafka\"){\r",
									"    if(pm.variables.has(\"epStudentKafkaEventMeshIds\")){\r",
									"        var epStudentEventMeshIds = pm.variables.get(\"epStudentKafkaEventMeshIds\");\r",
									"        var epStudentEventMeshEnvironments = pm.variables.get(\"epStudentKafkaEventMeshEnvironments\");\r",
									"\r",
									"    }else{\r",
									"        var epStudentEventMeshIds = [];\r",
									"        var epStudentEventMeshEnvironments = [] ;\r",
									"    }\r",
									"\r",
									"}else{\r",
									"    if(pm.variables.has(\"epStudentSolaceEventMeshIds\")){\r",
									"        var epStudentEventMeshIds = pm.variables.get(\"epStudentSolaceEventMeshIds\");\r",
									"        var epStudentEventMeshEnvironments = pm.variables.get(\"epStudentSolaceEventMeshEnvironments\");\r",
									"\r",
									"    }else{\r",
									"        var epStudentEventMeshIds = [];\r",
									"        var epStudentEventMeshEnvironments = [] ;\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"epStudentEventMeshIds.push(response.data.id);\r",
									"epStudentEventMeshEnvironments.push(pm.collectionVariables.get(\"epEnvironmentName\"));\r",
									"\r",
									"\r",
									"pm.variables.set(\"epStudentEventMeshIds\", epStudentEventMeshIds);\r",
									"pm.variables.set(\"epStudentEventMeshEnvironments\", epStudentEventMeshEnvironments);\r",
									"\r",
									"if(currentBrokerType == \"kafka\"){\r",
									"    pm.variables.set(\"epStudentKafkaEventMeshIds\", epStudentEventMeshIds);\r",
									"    pm.variables.set(\"epStudentKafkaEventMeshEnvironments\", epStudentEventMeshEnvironments);\r",
									"\r",
									"}else{\r",
									"    pm.variables.set(\"epStudentSolaceEventMeshIds\", epStudentEventMeshIds);\r",
									"    pm.variables.set(\"epStudentSolaceEventMeshEnvironments\", epStudentEventMeshEnvironments);\r",
									"\r",
									"}\r",
									"\r",
									"//console.log(\"epStudentEventMeshEnvironments\", epStudentEventMeshEnvironments);\r",
									"//console.log(\"epStudentEventMeshIds\", epStudentEventMeshIds);\r",
									"//console.log(\"epStudentEventMeshBrokerTypes\", epStudentEventMeshBrokerTypes);\r",
									"\r",
									"//figure out whether to loop again, first through broker types, then by environments.\r",
									"if(pm.variables.has(\"epEnvironmentIds\")){\r",
									"//    console.log(\"looping logic post event mesh\");\r",
									"    var epEnvironmentIdCount = pm.variables.get(\"epEnvironmentIdCount\");\r",
									"    var epEnvironmentIds = pm.variables.get(\"epEnvironmentIds\");\r",
									"\r",
									"    epDistinctBrokerTypesCount = pm.variables.get(\"epDistinctBrokerTypesCount\");\r",
									"    epDistinctBrokerTypes = pm.variables.get(\"epDistinctBrokerTypes\");    \r",
									"    epDistinctBrokerTypesCount++;\r",
									"    //SEE IF MORE BROKERS FOR THIS ENVIRONMENT\r",
									"    if(epDistinctBrokerTypesCount < epDistinctBrokerTypes.length){\r",
									"//        console.log(\"broker count\", epDistinctBrokerTypesCount, epDistinctBrokerTypes.lengthlength);\r",
									"        pm.variables.set(\"epDistinctBrokerTypesCount\", epDistinctBrokerTypesCount);\r",
									"        postman.setNextRequest(\"Create event mesh populated with application versions\");\r",
									"    }else{\r",
									"        epEnvironmentIdCount++;\r",
									"        //SEE IF MORE ENVIRONMENTS\r",
									"        if(epEnvironmentIdCount < epEnvironmentIds.length){\r",
									"            pm.variables.set(\"epDistinctBrokerTypesCount\", 0);\r",
									"//            console.log(\"environment count\", epEnvironmentIdCount, epEnvironmentIds.length);\r",
									"            pm.variables.set(\"epEnvironmentIdCount\", epEnvironmentIdCount);\r",
									"            postman.setNextRequest(\"Create event mesh populated with application versions\");\r",
									"        }else{\r",
									"            pm.variables.set(\"epStudentEventMeshIdCount\", 0);\r",
									"            pm.variables.set(\"epDistinctBrokerTypesCount\", 0);\r",
									"    } \r",
									"    }\r",
									"    \r",
									"\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json;charset=UTF-8"
							},
							{
								"key": "Accept",
								"value": "application/json;charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{epMemNameBase}}-{{epBrokerType}}-{{epEnvironmentName}}\",\n  \"environmentId\": \"{{epEnvironmentId}}\",\n  \"description\": \"This is a {{epBrokerType}} modelled event mesh established for use of {{epStudentName}}.  It exists in  {{epEnvironmentName}} environment and is used as part of the {{epMemNameBase}} demo\",\n  \"brokerType\": \"{{epBrokerType}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/architecture/eventMeshes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"architecture",
								"eventMeshes"
							]
						},
						"description": "Creates an event mesh object."
					},
					"response": [
						{
							"name": "Created an event mesh. The newly saved event object is returned in the response body.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Inventory\",\n  \"environmentId\": \"67890\",\n  \"description\": \"The Inventory Event Meshapplications.\",\n  \"brokerType\": \"kafka\",\n  \"applicationVersionIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventMeshes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventMeshes"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"meta\": {\n    \"dolor_e1\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Bad Request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Inventory\",\n  \"environmentId\": \"67890\",\n  \"description\": \"The Inventory Event Meshapplications.\",\n  \"brokerType\": \"kafka\",\n  \"applicationVersionIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventMeshes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventMeshes"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Unauthorized.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Inventory\",\n  \"environmentId\": \"67890\",\n  \"description\": \"The Inventory Event Meshapplications.\",\n  \"brokerType\": \"kafka\",\n  \"applicationVersionIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventMeshes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventMeshes"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Forbidden.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Inventory\",\n  \"environmentId\": \"67890\",\n  \"description\": \"The Inventory Event Meshapplications.\",\n  \"brokerType\": \"kafka\",\n  \"applicationVersionIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventMeshes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventMeshes"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Found.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Inventory\",\n  \"environmentId\": \"67890\",\n  \"description\": \"The Inventory Event Meshapplications.\",\n  \"brokerType\": \"kafka\",\n  \"applicationVersionIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventMeshes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventMeshes"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Method Not Allowed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Inventory\",\n  \"environmentId\": \"67890\",\n  \"description\": \"The Inventory Event Meshapplications.\",\n  \"brokerType\": \"kafka\",\n  \"applicationVersionIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventMeshes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventMeshes"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Internal Server Error.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Inventory\",\n  \"environmentId\": \"67890\",\n  \"description\": \"The Inventory Event Meshapplications.\",\n  \"brokerType\": \"kafka\",\n  \"applicationVersionIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventMeshes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventMeshes"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Implemented",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Inventory\",\n  \"environmentId\": \"67890\",\n  \"description\": \"The Inventory Event Meshapplications.\",\n  \"brokerType\": \"kafka\",\n  \"applicationVersionIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventMeshes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventMeshes"
									]
								}
							},
							"status": "Not Implemented",
							"code": 501,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Service Unavailable.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Inventory\",\n  \"environmentId\": \"67890\",\n  \"description\": \"The Inventory Event Meshapplications.\",\n  \"brokerType\": \"kafka\",\n  \"applicationVersionIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventMeshes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventMeshes"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Gateway Timeout.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Inventory\",\n  \"environmentId\": \"67890\",\n  \"description\": \"The Inventory Event Meshapplications.\",\n  \"brokerType\": \"kafka\",\n  \"applicationVersionIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventMeshes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventMeshes"
									]
								}
							},
							"status": "Gateway Timeout",
							"code": 504,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Creates an EMA object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//capture EventMeshIds\r",
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"pm.collectionVariables.set(\"epRuntimeAgentId\", response.data.id);\r",
									"pm.variables.set(\"epStudentEventMeshIdCount\", 0);\r",
									"var epStudentEventMeshBrokerTypes = [];\r",
									"epStudentEventMeshBrokerTypes = pm.variables.get(\"epStudentEventMeshBrokerTypes\");\r",
									"\r",
									"\r",
									"\r",
									"//NOW START DETERMINING WHICH MESSAGING SERVICES NEED TO BE CREATED\r",
									"\r",
									"//GET FIRST INSTANCE OF AN EVENT MESH FOR KAFKA AND SOLACE\r",
									"    if(pm.variables.has(\"epStudentKafkaEventMeshIds\")){\r",
									"        postman.setNextRequest(\"Create a kafka messaging service\");\r",
									"    }else{\r",
									"         postman.setNextRequest(\"Create a solace messaging service\"); \r",
									"    }\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"confluentEnvironmentNamesCount\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n            \"runtimeAgentRegionId\": \"{{epRuntimeAgentRegionId}}\",\n            \"name\": \"{{epEnterpriseName}} Event Management Agent\",\n            \"region\": \"us-east-1b\",\n            \"eventManagementAgentRegionId\": \"{{epRuntimeAgentRegionId}}\",\n            \"type\": \"runtimeAgent\"\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/architecture/eventManagementAgents",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"architecture",
								"eventManagementAgents"
							]
						},
						"description": "Use this API to create an EMA object."
					},
					"response": [
						{
							"name": "Created an EMA. The newly saved object is returned in the response body.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventManagementAgentRegionId\": \"sdfkjh3242ds\",\n  \"name\": \"primary event management agent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventManagementAgents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventManagementAgents"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"meta\": {\n    \"minim_50\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Bad Request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventManagementAgentRegionId\": \"sdfkjh3242ds\",\n  \"name\": \"primary event management agent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventManagementAgents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventManagementAgents"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"ested0\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"nulla4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"qui238\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"sed_9\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Unauthorized.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventManagementAgentRegionId\": \"sdfkjh3242ds\",\n  \"name\": \"primary event management agent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventManagementAgents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventManagementAgents"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"ested0\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"nulla4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"qui238\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"sed_9\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Forbidden.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventManagementAgentRegionId\": \"sdfkjh3242ds\",\n  \"name\": \"primary event management agent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventManagementAgents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventManagementAgents"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"ested0\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"nulla4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"qui238\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"sed_9\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Found.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventManagementAgentRegionId\": \"sdfkjh3242ds\",\n  \"name\": \"primary event management agent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventManagementAgents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventManagementAgents"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"ested0\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"nulla4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"qui238\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"sed_9\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Method Not Allowed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventManagementAgentRegionId\": \"sdfkjh3242ds\",\n  \"name\": \"primary event management agent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventManagementAgents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventManagementAgents"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"ested0\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"nulla4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"qui238\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"sed_9\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Internal Server Error.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventManagementAgentRegionId\": \"sdfkjh3242ds\",\n  \"name\": \"primary event management agent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventManagementAgents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventManagementAgents"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"ested0\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"nulla4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"qui238\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"sed_9\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Implemented",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventManagementAgentRegionId\": \"sdfkjh3242ds\",\n  \"name\": \"primary event management agent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventManagementAgents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventManagementAgents"
									]
								}
							},
							"status": "Not Implemented",
							"code": 501,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"ested0\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"nulla4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"qui238\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"sed_9\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Service Unavailable.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventManagementAgentRegionId\": \"sdfkjh3242ds\",\n  \"name\": \"primary event management agent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventManagementAgents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventManagementAgents"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"ested0\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"nulla4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"qui238\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"sed_9\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Gateway Timeout.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventManagementAgentRegionId\": \"sdfkjh3242ds\",\n  \"name\": \"primary event management agent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/eventManagementAgents",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"eventManagementAgents"
									]
								}
							},
							"status": "Gateway Timeout",
							"code": 504,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"ested0\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"nulla4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"qui238\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"sed_9\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Create a kafka messaging service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.variables.has(\"epStudentKafkaEventMeshIds\")){\r",
									"\r",
									"    var epStudentEventMeshIdCount = pm.variables.get(\"epStudentEventMeshIdCount\");\r",
									"\r",
									"\r",
									"    //GET MESH IDS-- NOTE GETTING KAFKA IDS ONLY\r",
									"    var epStudentEventMeshIds = pm.variables.get(\"epStudentKafkaEventMeshIds\");\r",
									"    var epMeshId = epStudentEventMeshIds[epStudentEventMeshIdCount];\r",
									"\r",
									"        //THIS PART KAFKA SPECIFIC\r",
									"        //GET KAFKA BOOTSTRAP\r",
									"        var confluentClusterBootstrapsDefault = JSON.parse(pm.environment.get(\"confluentClusterBootstrapsDefault\"));\r",
									"        var confluentClusterBootstrap = confluentClusterBootstrapsDefault[epStudentEventMeshIdCount];\r",
									"\r",
									"        //GET KAFKA CLUSTER ADMIN\r",
									"        var confluentClusterAdminApiKeysDefault = JSON.parse(pm.environment.get(\"confluentClusterAdminApiKeysDefault\"));\r",
									"        var confluentClusterAdminApiKey = confluentClusterAdminApiKeysDefault[epStudentEventMeshIdCount];        \r",
									"\r",
									"\r",
									"\r",
									"    // GET ENVIRONMENT NAME\r",
									"    var epStudentEventMeshEnvironments = pm.variables.get(\"epStudentEventMeshEnvironments\");\r",
									"    var epEnvironmentName = epStudentEventMeshEnvironments[epStudentEventMeshIdCount];\r",
									"    \r",
									"//    console.log(\"epStudentEventMeshEnvironments\", epStudentEventMeshEnvironments);\r",
									"//    console.log(\"epStudentEventMeshIdCount\", epStudentEventMeshIdCount);\r",
									"\r",
									"    //GET STUDENTS NAME\r",
									"    var epStudentName = pm.variables.get(\"epStudentName\");\r",
									"  \r",
									"\r",
									"    pm.collectionVariables.set(\"epMeshId\", epMeshId);\r",
									"    pm.collectionVariables.set(\"epStudentName\", epStudentName);\r",
									"    pm.collectionVariables.set(\"epEnvironmentName\", epEnvironmentName.toUpperCase());\r",
									"    pm.collectionVariables.set(\"confluentClusterBootstrap\",confluentClusterBootstrap);\r",
									"    pm.collectionVariables.set(\"confluentClusterAdminApiKey\",confluentClusterAdminApiKey);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//capture EventMeshIds\r",
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"if(pm.variables.has(\"epStudentKafkaMsgServiceIds\")){\r",
									"    var epStudentMsgServiceIds = pm.variables.get(\"epStudentKafkaMsgServiceIds\");\r",
									"\r",
									"}else{\r",
									"    var epStudentMsgServiceIds = [];\r",
									"\r",
									"}\r",
									"\r",
									"epStudentEventMeshIdCount = pm.variables.get(\"epStudentEventMeshIdCount\");\r",
									"epStudentMsgServiceIds[epStudentEventMeshIdCount] = response.data.id;\r",
									"\r",
									"pm.variables.set(\"epStudentKafkaMsgServiceIds\", epStudentMsgServiceIds);\r",
									"\r",
									"\r",
									"\r",
									"//figure out whether to loop again\r",
									"if(pm.variables.has(\"epStudentKafkaEventMeshIds\")){\r",
									"    epStudentEventMeshIds = pm.variables.get(\"epStudentKafkaEventMeshIds\");\r",
									"    epStudentEventMeshIdCount = pm.variables.get(\"epStudentEventMeshIdCount\");\r",
									"    epStudentEventMeshIdCount++;\r",
									"\r",
									"    if(epStudentEventMeshIdCount < epStudentEventMeshIds.length){\r",
									"        pm.variables.set(\"epStudentEventMeshIdCount\", epStudentEventMeshIdCount);\r",
									"        postman.setNextRequest(\"Create a kafka messaging service\");\r",
									"    }else if (pm.variables.has(\"epStudentSolaceEventMeshIds\")){\r",
									"        pm.variables.set(\"epStudentEventMeshIdCount\", 0);\r",
									"        postman.setNextRequest(\"Create a solace messaging service\");        \r",
									"    }else{\r",
									"        postman.setNextRequest(\"Update messaging service association for an application version object\");\r",
									"        pm.variables.set(\"epStudentApplicationVersionIdCount\", 0);\r",
									"        pm.variables.set(\"epStudentEventMeshIdCount\", 0);\r",
									"        };\r",
									"    }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{epEnvironmentName}}-Kafka\",\n    \"messagingServiceType\": \"kafka\",\n    \"bindings\": null,\n    \"eventMeshId\": \"{{epMeshId}}\",\n    \"eventManagementAgentId\": \"{{epRuntimeAgentId}}\",\n    \"messagingServiceConnections\": [\n        {\n            \"name\": \"kafkaSASLPLAINSSLConnection\",\n            \"url\": \"{{confluentClusterBootstrap}}\",\n            \"messagingServiceAuthentications\": [\n                {\n                    \"name\": \"{{epEnvironmentName}}-Kafka\",\n                    \"authenticationType\": \"saslplain\",\n                    \"authenticationDetails\": {\n                        \"protocol\": \"SASL_SSL\",\n                        \"properties\": [\n                            {\n                                \"name\": \"type\",\n                                \"value\": \"saslplain\"\n                            }\n                        ]\n                    },\n                    \"messagingServiceCredentials\": [\n                        {\n                            \"name\": \"{{epEnvironmentName}}-Kafka\",\n                            \"credentials\": {\n                                \"type\": \"saslplain\",\n                                \"source\": \"ENVIRONMENT_VARIABLE\",\n                                \"operations\": [\n                                    {\n                                        \"name\": \"ALL\"\n                                    }\n                                ],\n                                \"properties\": [\n                                    {\n                                        \"name\": \"sasl.jaas.config\",\n                                        \"value\": \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"{{confluentClusterAdminApiKey}}\\\" password=\\\"${KAFKA_{{epEnvironmentName}}_CLUSTER_PASSWORD}\\\";\"\n                                    },\n                                    {\n                                        \"name\": \"sasl.mechanism\",\n                                        \"value\": \"PLAIN\"\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"architecture",
								"messagingServices"
							]
						},
						"description": "Use this API to create a messaging service object."
					},
					"response": [
						{
							"name": "Created a messaging service. The newly saved object is returned in the response body.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"meta\": {\n    \"dolor_e1\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Bad Request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Unauthorized.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Forbidden.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Found.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Method Not Allowed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Internal Server Error.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Implemented",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Not Implemented",
							"code": 501,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Service Unavailable.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Gateway Timeout.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Gateway Timeout",
							"code": 504,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Create a solace messaging service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.variables.has(\"epStudentSolaceEventMeshIds\")){\r",
									"\r",
									"    var epStudentEventMeshIdCount = pm.variables.get(\"epStudentEventMeshIdCount\");\r",
									"\r",
									"\r",
									"    //GET MESH IDS-- NOTE GETTING KAFKA IDS ONLY\r",
									"    var epStudentEventMeshIds = pm.variables.get(\"epStudentSolaceEventMeshIds\");\r",
									"    var epMeshId = epStudentEventMeshIds[epStudentEventMeshIdCount];\r",
									"\r",
									"    //THIS PART SOLACE SPECIFIC\r",
									"    //GET SOLACE SEMP URL\r",
									"    var solaceMsgVpnsDefault = JSON.parse(pm.environment.get(\"solaceMsgVpnsDefault\"));\r",
									"    var solaceMsgVpn = solaceMsgVpnsDefault[epStudentEventMeshIdCount];\r",
									"\r",
									"    //GET SOLACE VPN\r",
									"    var solaceSempUrlsDefault = JSON.parse(pm.environment.get(\"solaceSempUrlsDefault\"));\r",
									"    var solaceSempUrl = solaceSempUrlsDefault[epStudentEventMeshIdCount];        \r",
									"\r",
									"    //GET SOLACE USER\r",
									"    var solaceSempUsersDefault = JSON.parse(pm.environment.get(\"solaceSempUsersDefault\"));\r",
									"    var solaceSempUser = solaceSempUsersDefault[epStudentEventMeshIdCount];           \r",
									"        \r",
									"    // GET ENVIRONMENT NAME\r",
									"    var epStudentEventMeshEnvironments = pm.variables.get(\"epStudentEventMeshEnvironments\");\r",
									"    var epEnvironmentName = epStudentEventMeshEnvironments[epStudentEventMeshIdCount];\r",
									"    \r",
									"//    console.log(\"epStudentEventMeshEnvironments\", epStudentEventMeshEnvironments);\r",
									"//    console.log(\"epStudentEventMeshIdCount\", epStudentEventMeshIdCount);\r",
									"\r",
									"    //GET STUDENTS NAME\r",
									"    var epStudentName = pm.variables.get(\"epStudentName\");\r",
									"  \r",
									"    pm.collectionVariables.set(\"epMeshId\", epMeshId);\r",
									"    pm.collectionVariables.set(\"epStudentName\", epStudentName);\r",
									"    pm.collectionVariables.set(\"epEnvironmentName\", epEnvironmentName.toUpperCase());\r",
									"    pm.collectionVariables.set(\"solaceSempUser\",solaceSempUser);\r",
									"    pm.collectionVariables.set(\"solaceMsgVpn\",solaceMsgVpn);\r",
									"    pm.collectionVariables.set(\"solaceSempUrl\",solaceSempUrl);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//capture EventMeshIds\r",
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"if(pm.variables.has(\"epStudentSolaceMsgServiceIds\")){\r",
									"    var epStudentMsgServiceIds = pm.variables.get(\"epStudentSolaceMsgServiceIds\");\r",
									"\r",
									"}else{\r",
									"    var epStudentMsgServiceIds = [];\r",
									"\r",
									"}\r",
									"\r",
									"epStudentEventMeshIdCount = pm.variables.get(\"epStudentEventMeshIdCount\");\r",
									"epStudentMsgServiceIds[epStudentEventMeshIdCount] = response.data.id;\r",
									"\r",
									"pm.variables.set(\"epStudentSolaceMsgServiceIds\", epStudentMsgServiceIds);\r",
									"\r",
									"\r",
									"\r",
									"//figure out whether to loop again\r",
									"if(pm.variables.has(\"epStudentSolaceEventMeshIds\")){\r",
									"    epStudentEventMeshIds = pm.variables.get(\"epStudentSolaceEventMeshIds\");\r",
									"    epStudentEventMeshIdCount = pm.variables.get(\"epStudentEventMeshIdCount\");\r",
									"    epStudentEventMeshIdCount++;\r",
									"\r",
									"    if(epStudentEventMeshIdCount < epStudentEventMeshIds.length){\r",
									"        pm.variables.set(\"epStudentEventMeshIdCount\", epStudentEventMeshIdCount);\r",
									"        postman.setNextRequest(\"Create a solace messaging service\"); \r",
									"    }else{\r",
									"        postman.setNextRequest(\"Update messaging service association for an application version object\");\r",
									"        pm.variables.set(\"epStudentApplicationVersionIdCount\", 0);\r",
									"        pm.variables.set(\"epStudentEventMeshIdCount\", 0);\r",
									"        };\r",
									"    }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventMeshId\": \"{{epMeshId}}\",\n    \"messagingServiceType\": \"solace\",\n    \"name\": \"{{epEnvironmentName}}-solace\",\n    \"messagingServiceConnections\": [\n        {\n            \"name\": \"{{epEnvironmentName}}-solace\",\n            \"url\": \"{{solaceSempUrl}}\",\n            \"protocol\": \"semp\",\n            \"protocolVersion\": \"1.0.0\",\n            \"bindings\": {\n                \"msgVpn\": \"{{solaceMsgVpn}}\"\n            },\n            \"messagingServiceAuthentications\": [\n                {\n                    \"name\": \"{{epEnvironmentName}}-solace\",\n                    \"authenticationType\": \"userPass\",\n                    \"authenticationDetails\": {\n                        \"protocol\": \"SEMPURL\",\n                        \"properties\": [\n                            {\n                                \"name\": \"type\",\n                                \"value\": \"semp\"\n                            }\n                        ]\n                    },\n                    \"messagingServiceCredentials\": [\n                        {\n                            \"name\": \"{{epEnvironmentName}}-solace\",\n                            \"credentials\": {\n                                \"name\": \"sempuser\",\n                                \"username\": \"{{solaceSempUser}}\",\n                                \"password\": \"${SOLACE_{{epEnvironmentName}}_SEMP_PASSWORD}\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    \"eventManagementAgentId\": \"{{epRuntimeAgentId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"architecture",
								"messagingServices"
							]
						},
						"description": "Use this API to create a messaging service object."
					},
					"response": [
						{
							"name": "Created a messaging service. The newly saved object is returned in the response body.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"meta\": {\n    \"dolor_e1\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Bad Request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Unauthorized.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Forbidden.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Found.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Method Not Allowed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Internal Server Error.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Implemented",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Not Implemented",
							"code": 501,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Service Unavailable.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Gateway Timeout.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventMeshId\": \"67890x23vh\",\n  \"runtimeAgentId\": \"vh1234y14\",\n  \"solaceCloudMessagingServiceId\": \"abcd1234x\",\n  \"messagingServiceType\": \"solace\",\n  \"name\": \"first messagingService\",\n  \"messagingServiceConnections\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"eventManagementAgentId\": \"quis\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"messagingServices"
									]
								}
							},
							"status": "Gateway Timeout",
							"code": 504,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"enim_f4\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"aliqua_5e5\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Update messaging service association for an application version object",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.variables.has(\"epStudentApplicationVersionIds\")){\r",
									"\r",
									"    //GET CURRENT APPLICATION VERSION ID\r",
									"    var epStudentApplicationVersionIds = pm.variables.get(\"epStudentApplicationVersionIds\");\r",
									"    var epStudentApplicationVersionIdCount = pm.variables.get(\"epStudentApplicationVersionIdCount\");\r",
									"    var epApplicationVersionId = epStudentApplicationVersionIds[epStudentApplicationVersionIdCount];\r",
									"\r",
									"console.log( epStudentApplicationVersionIds, epStudentApplicationVersionIdCount, epApplicationVersionId);\r",
									"\r",
									"    //GET CURRENT APPLICATION BROKER TYPE\r",
									"    var epStudentApplicationBrokerTypes = pm.variables.get(\"epStudentApplicationBrokerTypes\");\r",
									"    var epStudentApplicationBrokerType = epStudentApplicationBrokerTypes[epStudentApplicationVersionIdCount];\r",
									"    \r",
									"    if(epStudentApplicationBrokerType == \"kafka\"){\r",
									"        var epStudentMsgServiceIds = pm.variables.get(\"epStudentKafkaMsgServiceIds\");\r",
									"\r",
									"    }else{\r",
									"        var epStudentMsgServiceIds = pm.variables.get(\"epStudentSolaceMsgServiceIds\");\r",
									"\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set(\"epApplicationVersionId\", epApplicationVersionId);\r",
									"    pm.collectionVariables.set(\"epMsgServiceIds\", JSON.stringify(epStudentMsgServiceIds));\r",
									" \r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//figure out whether to loop again\r",
									"if(pm.variables.has(\"epStudentApplicationVersionIds\")){\r",
									"    epStudentApplicationVersionIds = pm.variables.get(\"epStudentApplicationVersionIds\");\r",
									"    epStudentApplicationVersionIdCount = pm.variables.get(\"epStudentApplicationVersionIdCount\");\r",
									"    epStudentApplicationVersionIdCount++;\r",
									"    \r",
									"    if(epStudentApplicationVersionIdCount < epStudentApplicationVersionIds.length){\r",
									"        //console.log(\"version id  count\", epStudentApplicationVersionIdCount, epStudentApplicationVersionIds.length);\r",
									"        pm.variables.set(\"epStudentApplicationVersionIdCount\", epStudentApplicationVersionIdCount);\r",
									"        postman.setNextRequest(\"Update messaging service association for an application version object\");\r",
									"    }\r",
									"    else{\r",
									"        //all meshes done for this student, see if we need to loop again for another student.\r",
									"        \r",
									"        epStudentNamesEmails = pm.variables.get(\"epStudentNamesEmails\");\r",
									"        epStudentNamesEmailsCount = pm.variables.get(\"epStudentNamesEmailsCount\");\r",
									"        epStudentNamesEmailsCount++;\r",
									"        if(epStudentNamesEmailsCount < epStudentNamesEmails.length){\r",
									"            //console.log(\"student count\", epStudentNamesEmailsCount, epStudentNamesEmails.length);\r",
									"            pm.variables.set(\"epStudentNamesEmailsCount\", epStudentNamesEmailsCount);\r",
									"            pm.variables.set(\"epStudentDomainIds\", []);\r",
									"            pm.variables.set(\"epStudentApplicationIds\", []);\r",
									"            pm.variables.set(\"epStudentApplicationVersionIds\", []);\r",
									"            pm.variables.set(\"epStudentEventMeshIds\", []);\r",
									"            pm.variables.set(\"epStudentMsgServiceIds\", []);\r",
									"            postman.setNextRequest(\"Create new user\");\r",
									"        }else{\r",
									"            //set collection variables for next stage\r",
									"            epStudentKafkaEventMeshIds = pm.variables.get(\"epStudentKafkaEventMeshIds\");\r",
									"            epStudentKafkaMsgServiceIds = pm.variables.get(\"epStudentKafkaMsgServiceIds\");\r",
									"            epStudentSolaceEventMeshIds = pm.variables.get(\"epStudentSolaceEventMeshIds\");\r",
									"            epStudentSolaceMsgServiceIds = pm.variables.get(\"epStudentSolaceMsgServiceIds\");\r",
									"            epStudentApplicationNames = pm.variables.get(\"epStudentApplicationNames\");\r",
									"            epApplicationToTopicMap = pm.variables.get(\"epApplicationToTopicMap\");\r",
									"            epApplicationToConsumerGroupsMap = pm.variables.get(\"epApplicationToConsumerGroupsMap\");\r",
									"            pm.collectionVariables.set(\"epStudentKafkaMsgServiceIdsTransfer\", JSON.stringify(epStudentKafkaMsgServiceIds));\r",
									"            pm.collectionVariables.set(\"epStudentKafkaEventMeshIdsTransfer\", JSON.stringify(epStudentKafkaEventMeshIds));\r",
									"            pm.collectionVariables.set(\"epStudentSolaceMsgServiceIdsTransfer\", JSON.stringify(epStudentSolaceMsgServiceIds));\r",
									"            pm.collectionVariables.set(\"epStudentSolaceEventMeshIdsTransfer\", JSON.stringify(epStudentSolaceEventMeshIds));\r",
									"            pm.collectionVariables.set(\"epStudentApplicationNamesTransfer\", JSON.stringify(epStudentApplicationNames));\r",
									"\r",
									"            pm.collectionVariables.set(\"epApplicationToTopicMapTransfer\", JSON.stringify(epApplicationToTopicMap));\r",
									"            pm.collectionVariables.set(\"epApplicationToConsumerGroupsMap\", JSON.stringify(epApplicationToConsumerGroupsMap));\r",
									"            pm.variables.set(\"epQueueConsumerIdCount\", 0);\r",
									"        }\r",
									"    } \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json;charset=UTF-8"
							},
							{
								"key": "Accept",
								"value": "application/json;charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"messagingServiceIds\": {{epMsgServiceIds}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions/:versionId/messagingServices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"architecture",
								"applicationVersions",
								":versionId",
								"messagingServices"
							],
							"variable": [
								{
									"key": "versionId",
									"value": "{{epApplicationVersionId}}",
									"description": "(Required) The ID of the application version"
								}
							]
						},
						"description": "Use this API to update the messaging service association for an application version."
					},
					"response": [
						{
							"name": "The updated messaging service associations.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"messagingServiceIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions/:versionId/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions",
										":versionId",
										"messagingServices"
									],
									"variable": [
										{
											"key": "versionId",
											"value": "occaecat in sunt",
											"description": "(Required) The ID of the application version"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"meta\": {\n    \"nulla_e8\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tempor047\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Bad Request.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"messagingServiceIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions/:versionId/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions",
										":versionId",
										"messagingServices"
									],
									"variable": [
										{
											"key": "versionId",
											"value": "occaecat in sunt",
											"description": "(Required) The ID of the application version"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"amet_751\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"proident__da\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"laboris_65d\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"ullamco_1\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Unauthorized.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"messagingServiceIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions/:versionId/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions",
										":versionId",
										"messagingServices"
									],
									"variable": [
										{
											"key": "versionId",
											"value": "occaecat in sunt",
											"description": "(Required) The ID of the application version"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"amet_751\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"proident__da\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"laboris_65d\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"ullamco_1\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Forbidden.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"messagingServiceIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions/:versionId/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions",
										":versionId",
										"messagingServices"
									],
									"variable": [
										{
											"key": "versionId",
											"value": "occaecat in sunt",
											"description": "(Required) The ID of the application version"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"amet_751\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"proident__da\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"laboris_65d\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"ullamco_1\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Found.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"messagingServiceIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions/:versionId/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions",
										":versionId",
										"messagingServices"
									],
									"variable": [
										{
											"key": "versionId",
											"value": "occaecat in sunt",
											"description": "(Required) The ID of the application version"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"amet_751\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"proident__da\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"laboris_65d\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"ullamco_1\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Method Not Allowed",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"messagingServiceIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions/:versionId/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions",
										":versionId",
										"messagingServices"
									],
									"variable": [
										{
											"key": "versionId",
											"value": "occaecat in sunt",
											"description": "(Required) The ID of the application version"
										}
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"amet_751\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"proident__da\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"laboris_65d\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"ullamco_1\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Internal Server Error.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"messagingServiceIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions/:versionId/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions",
										":versionId",
										"messagingServices"
									],
									"variable": [
										{
											"key": "versionId",
											"value": "occaecat in sunt",
											"description": "(Required) The ID of the application version"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"amet_751\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"proident__da\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"laboris_65d\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"ullamco_1\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Not Implemented",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"messagingServiceIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions/:versionId/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions",
										":versionId",
										"messagingServices"
									],
									"variable": [
										{
											"key": "versionId",
											"value": "occaecat in sunt",
											"description": "(Required) The ID of the application version"
										}
									]
								}
							},
							"status": "Not Implemented",
							"code": 501,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"amet_751\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"proident__da\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"laboris_65d\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"ullamco_1\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Service Unavailable.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"messagingServiceIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions/:versionId/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions",
										":versionId",
										"messagingServices"
									],
									"variable": [
										{
											"key": "versionId",
											"value": "occaecat in sunt",
											"description": "(Required) The ID of the application version"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"amet_751\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"proident__da\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"laboris_65d\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"ullamco_1\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						},
						{
							"name": "Gateway Timeout.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"messagingServiceIds\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/applicationVersions/:versionId/messagingServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"applicationVersions",
										":versionId",
										"messagingServices"
									],
									"variable": [
										{
											"key": "versionId",
											"value": "occaecat in sunt",
											"description": "(Required) The ID of the application version"
										}
									]
								}
							},
							"status": "Gateway Timeout",
							"code": 504,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"An error occurred\",\n  \"errorId\": \"123e4567-e89b-12d3-a456-426655440000\",\n  \"meta\": {\n    \"amet_751\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"validationDetails\": {\n    \"proident__da\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"laboris_65d\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"ullamco_1\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Create a solace queue configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.variables.has(\"epQueueConsumerIds\")){\r",
									"\r",
									"    //GET CURRENT APPLICATION VERSION ID\r",
									"    var epQueueConsumerIds = pm.variables.get(\"epQueueConsumerIds\");\r",
									"    var epQueueConsumerNames = pm.variables.get(\"epQueueConsumerNames\");\r",
									"    var epQueueConsumerIdCount = pm.variables.get(\"epQueueConsumerIdCount\");\r",
									"    var epQueueConsumerId = epQueueConsumerIds[epQueueConsumerIdCount];\r",
									"    var epQueueConsumerName = epQueueConsumerNames[epQueueConsumerIdCount];\r",
									"\r",
									"    console.log( epQueueConsumerIds, epQueueConsumerIdCount, epQueueConsumerName);\r",
									"\r",
									"\r",
									"    pm.collectionVariables.set(\"epQueueConsumerId\", epQueueConsumerId);\r",
									"    pm.collectionVariables.set(\"epQueueConsumerName\", epQueueConsumerName);\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//figure out whether to loop again\r",
									"if(pm.variables.has(\"epQueueConsumerIds\")){\r",
									"    epQueueConsumerIds = pm.variables.get(\"epQueueConsumerIds\");\r",
									"    epQueueConsumerIdCount = pm.variables.get(\"epQueueConsumerIdCount\");\r",
									"    epQueueConsumerIdCount++;\r",
									"    \r",
									"    if(epQueueConsumerIdCount < epQueueConsumerIds.length){\r",
									"        //console.log(\"version id  count\", epQueueConsumerIdCount, epQueueConsumerIds.length);\r",
									"        pm.variables.set(\"epQueueConsumerIdCount\", epQueueConsumerIdCount);\r",
									"        postman.setNextRequest(\"Create a solace queue configuration\");\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json;charset=UTF-8"
							},
							{
								"key": "Accept",
								"value": "application/json;charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"contextType\": \"EVENT_BROKER\",\n        \"configurationTypeId\": \"solaceQueue\",\n        \"entityType\": \"consumer\",\n        \"entityId\": \"{{epQueueConsumerId}}\",\n        \"value\": {\n            \"queueName\": \"{{epQueueConsumerName}}\",\n            \"accessType\": \"exclusive\",\n            \"maxMsgSpoolUsage\": 5000\n        }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/architecture/designer/configuration/solaceQueues",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"architecture",
								"designer",
								"configuration",
								"solaceQueues"
							]
						},
						"description": "Create a solace queue configuration.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `ep_configuration:write` ]"
					},
					"response": [
						{
							"name": "Created. The newly saved solace queue configuration is returned in the response body.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "application/json;charset=UTF-8"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"contextId\": \"<string>\",\n  \"entityId\": \"<string>\",\n  \"entityType\": \"schema\",\n  \"createdTime\": \"<string>\",\n  \"updatedTime\": \"<string>\",\n  \"createdBy\": \"<string>\",\n  \"changedBy\": \"<string>\",\n  \"id\": \"<string>\",\n  \"contextType\": \"EVENT_BROKER\",\n  \"identifier\": \"<string>\",\n  \"value\": {\n    \"Ut_8\": {}\n  },\n  \"type\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/designer/configuration/solaceQueues",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"designer",
										"configuration",
										"solaceQueues"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"contextId\": \"<string>\",\n    \"entityId\": \"<string>\",\n    \"entityType\": \"audit\",\n    \"createdTime\": \"<string>\",\n    \"updatedTime\": \"<string>\",\n    \"createdBy\": \"<string>\",\n    \"changedBy\": \"<string>\",\n    \"id\": \"<string>\",\n    \"contextType\": \"EVENT_BROKER\",\n    \"identifier\": \"<string>\",\n    \"value\": {\n      \"ida\": {},\n      \"laboris_5\": {},\n      \"do_64\": {}\n    },\n    \"type\": \"<string>\"\n  },\n  \"meta\": {\n    \"culpa_4\": {}\n  }\n}"
						},
						{
							"name": "Bad Request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"contextId\": \"<string>\",\n  \"entityId\": \"<string>\",\n  \"entityType\": \"schema\",\n  \"createdTime\": \"<string>\",\n  \"updatedTime\": \"<string>\",\n  \"createdBy\": \"<string>\",\n  \"changedBy\": \"<string>\",\n  \"id\": \"<string>\",\n  \"contextType\": \"EVENT_BROKER\",\n  \"identifier\": \"<string>\",\n  \"value\": {\n    \"Ut_8\": {}\n  },\n  \"type\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/designer/configuration/solaceQueues",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"designer",
										"configuration",
										"solaceQueues"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errorId\": \"<string>\",\n  \"meta\": {\n    \"esse_a1\": {},\n    \"reprehenderit_78\": {}\n  },\n  \"validationDetails\": {\n    \"Lorem7e6\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"occaecatac\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"errorType\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"contextId\": \"<string>\",\n  \"entityId\": \"<string>\",\n  \"entityType\": \"schema\",\n  \"createdTime\": \"<string>\",\n  \"updatedTime\": \"<string>\",\n  \"createdBy\": \"<string>\",\n  \"changedBy\": \"<string>\",\n  \"id\": \"<string>\",\n  \"contextType\": \"EVENT_BROKER\",\n  \"identifier\": \"<string>\",\n  \"value\": {\n    \"Ut_8\": {}\n  },\n  \"type\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/designer/configuration/solaceQueues",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"designer",
										"configuration",
										"solaceQueues"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errorId\": \"<string>\",\n  \"meta\": {\n    \"esse_a1\": {},\n    \"reprehenderit_78\": {}\n  },\n  \"validationDetails\": {\n    \"Lorem7e6\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"occaecatac\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"errorType\": \"<string>\"\n}"
						},
						{
							"name": "Forbidden.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"contextId\": \"<string>\",\n  \"entityId\": \"<string>\",\n  \"entityType\": \"schema\",\n  \"createdTime\": \"<string>\",\n  \"updatedTime\": \"<string>\",\n  \"createdBy\": \"<string>\",\n  \"changedBy\": \"<string>\",\n  \"id\": \"<string>\",\n  \"contextType\": \"EVENT_BROKER\",\n  \"identifier\": \"<string>\",\n  \"value\": {\n    \"Ut_8\": {}\n  },\n  \"type\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/designer/configuration/solaceQueues",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"designer",
										"configuration",
										"solaceQueues"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errorId\": \"<string>\",\n  \"meta\": {\n    \"esse_a1\": {},\n    \"reprehenderit_78\": {}\n  },\n  \"validationDetails\": {\n    \"Lorem7e6\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"occaecatac\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"errorType\": \"<string>\"\n}"
						},
						{
							"name": "Not Found.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"contextId\": \"<string>\",\n  \"entityId\": \"<string>\",\n  \"entityType\": \"schema\",\n  \"createdTime\": \"<string>\",\n  \"updatedTime\": \"<string>\",\n  \"createdBy\": \"<string>\",\n  \"changedBy\": \"<string>\",\n  \"id\": \"<string>\",\n  \"contextType\": \"EVENT_BROKER\",\n  \"identifier\": \"<string>\",\n  \"value\": {\n    \"Ut_8\": {}\n  },\n  \"type\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/designer/configuration/solaceQueues",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"designer",
										"configuration",
										"solaceQueues"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errorId\": \"<string>\",\n  \"meta\": {\n    \"esse_a1\": {},\n    \"reprehenderit_78\": {}\n  },\n  \"validationDetails\": {\n    \"Lorem7e6\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"occaecatac\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"errorType\": \"<string>\"\n}"
						},
						{
							"name": "Method Not Allowed.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"contextId\": \"<string>\",\n  \"entityId\": \"<string>\",\n  \"entityType\": \"schema\",\n  \"createdTime\": \"<string>\",\n  \"updatedTime\": \"<string>\",\n  \"createdBy\": \"<string>\",\n  \"changedBy\": \"<string>\",\n  \"id\": \"<string>\",\n  \"contextType\": \"EVENT_BROKER\",\n  \"identifier\": \"<string>\",\n  \"value\": {\n    \"Ut_8\": {}\n  },\n  \"type\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/designer/configuration/solaceQueues",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"designer",
										"configuration",
										"solaceQueues"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errorId\": \"<string>\",\n  \"meta\": {\n    \"esse_a1\": {},\n    \"reprehenderit_78\": {}\n  },\n  \"validationDetails\": {\n    \"Lorem7e6\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"occaecatac\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"errorType\": \"<string>\"\n}"
						},
						{
							"name": "Internal Server Error.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"contextId\": \"<string>\",\n  \"entityId\": \"<string>\",\n  \"entityType\": \"schema\",\n  \"createdTime\": \"<string>\",\n  \"updatedTime\": \"<string>\",\n  \"createdBy\": \"<string>\",\n  \"changedBy\": \"<string>\",\n  \"id\": \"<string>\",\n  \"contextType\": \"EVENT_BROKER\",\n  \"identifier\": \"<string>\",\n  \"value\": {\n    \"Ut_8\": {}\n  },\n  \"type\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/designer/configuration/solaceQueues",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"designer",
										"configuration",
										"solaceQueues"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errorId\": \"<string>\",\n  \"meta\": {\n    \"esse_a1\": {},\n    \"reprehenderit_78\": {}\n  },\n  \"validationDetails\": {\n    \"Lorem7e6\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"occaecatac\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"errorType\": \"<string>\"\n}"
						},
						{
							"name": "Not Implemented.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"contextId\": \"<string>\",\n  \"entityId\": \"<string>\",\n  \"entityType\": \"schema\",\n  \"createdTime\": \"<string>\",\n  \"updatedTime\": \"<string>\",\n  \"createdBy\": \"<string>\",\n  \"changedBy\": \"<string>\",\n  \"id\": \"<string>\",\n  \"contextType\": \"EVENT_BROKER\",\n  \"identifier\": \"<string>\",\n  \"value\": {\n    \"Ut_8\": {}\n  },\n  \"type\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/designer/configuration/solaceQueues",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"designer",
										"configuration",
										"solaceQueues"
									]
								}
							},
							"status": "Not Implemented",
							"code": 501,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errorId\": \"<string>\",\n  \"meta\": {\n    \"esse_a1\": {},\n    \"reprehenderit_78\": {}\n  },\n  \"validationDetails\": {\n    \"Lorem7e6\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"occaecatac\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"errorType\": \"<string>\"\n}"
						},
						{
							"name": "Service Unavailable.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"contextId\": \"<string>\",\n  \"entityId\": \"<string>\",\n  \"entityType\": \"schema\",\n  \"createdTime\": \"<string>\",\n  \"updatedTime\": \"<string>\",\n  \"createdBy\": \"<string>\",\n  \"changedBy\": \"<string>\",\n  \"id\": \"<string>\",\n  \"contextType\": \"EVENT_BROKER\",\n  \"identifier\": \"<string>\",\n  \"value\": {\n    \"Ut_8\": {}\n  },\n  \"type\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/designer/configuration/solaceQueues",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"designer",
										"configuration",
										"solaceQueues"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errorId\": \"<string>\",\n  \"meta\": {\n    \"esse_a1\": {},\n    \"reprehenderit_78\": {}\n  },\n  \"validationDetails\": {\n    \"Lorem7e6\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"occaecatac\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"errorType\": \"<string>\"\n}"
						},
						{
							"name": "Gateway Timeout.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"contextId\": \"<string>\",\n  \"entityId\": \"<string>\",\n  \"entityType\": \"schema\",\n  \"createdTime\": \"<string>\",\n  \"updatedTime\": \"<string>\",\n  \"createdBy\": \"<string>\",\n  \"changedBy\": \"<string>\",\n  \"id\": \"<string>\",\n  \"contextType\": \"EVENT_BROKER\",\n  \"identifier\": \"<string>\",\n  \"value\": {\n    \"Ut_8\": {}\n  },\n  \"type\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/architecture/designer/configuration/solaceQueues",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"architecture",
										"designer",
										"configuration",
										"solaceQueues"
									]
								}
							},
							"status": "Gateway Timeout",
							"code": 504,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errorId\": \"<string>\",\n  \"meta\": {\n    \"esse_a1\": {},\n    \"reprehenderit_78\": {}\n  },\n  \"validationDetails\": {\n    \"Lorem7e6\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"occaecatac\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"errorType\": \"<string>\"\n}"
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{api_key}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{api_key}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "epEnvironmentId",
			"value": ""
		},
		{
			"key": "epApplicationId",
			"value": ""
		},
		{
			"key": "epMeshId",
			"value": ""
		},
		{
			"key": "epApplicationDomainId",
			"value": ""
		},
		{
			"key": "epEnvironmentName",
			"value": ""
		},
		{
			"key": "epStudentId",
			"value": ""
		},
		{
			"key": "epStudentFirstName",
			"value": ""
		},
		{
			"key": "epStudentLastName",
			"value": ""
		},
		{
			"key": "epStudentEmail",
			"value": ""
		},
		{
			"key": "epStudentUserId",
			"value": ""
		},
		{
			"key": "epStudentRoleId",
			"value": ""
		},
		{
			"key": "epStudentName",
			"value": ""
		},
		{
			"key": "epGithubPathToDomainExport",
			"value": ""
		},
		{
			"key": "epCustomizedDomainExport",
			"value": ""
		},
		{
			"key": "epUnmodifiedSampleDomain",
			"value": ""
		},
		{
			"key": "epEventMeshId",
			"value": ""
		},
		{
			"key": "epApplicationVersionId",
			"value": ""
		},
		{
			"key": "epBrokerType",
			"value": "",
			"type": "string"
		},
		{
			"key": "epEventMeshBrokerType",
			"value": ""
		},
		{
			"key": "epDomainQueryPage",
			"value": "",
			"type": "string"
		},
		{
			"key": "confluentEnvironmentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "confluentClusterId",
			"value": "",
			"type": "string"
		},
		{
			"key": "confluentClusterEndpoint",
			"value": "",
			"type": "string"
		},
		{
			"key": "confluentClusterApiKey",
			"value": "",
			"type": "string"
		},
		{
			"key": "confluentClusterApiSecret",
			"value": "",
			"type": "string"
		},
		{
			"key": "confluentSchemaRegistryId",
			"value": "",
			"type": "string"
		},
		{
			"key": "confluentSchemaRegistryEndpoint",
			"value": "",
			"type": "string"
		},
		{
			"key": "confluentSchemaRegistryApiKey",
			"value": "",
			"type": "string"
		},
		{
			"key": "confluentSchemaRegistryApiSecret",
			"value": "",
			"type": "string"
		},
		{
			"key": "confluentSchemaRegistryRegion",
			"value": "",
			"type": "string"
		},
		{
			"key": "confluentTopicName",
			"value": "",
			"type": "string"
		},
		{
			"key": "confluentEnvironmentName",
			"value": "",
			"type": "string"
		},
		{
			"key": "epEventTopic",
			"value": "",
			"type": "string"
		},
		{
			"key": "confluentSchemaContent",
			"value": "",
			"type": "string"
		},
		{
			"key": "epEventId",
			"value": ""
		},
		{
			"key": "epSchemaVersionId",
			"value": ""
		},
		{
			"key": "epEventIds",
			"value": ""
		},
		{
			"key": "epRuntimeAgentId",
			"value": ""
		},
		{
			"key": "epApplicationVersionsToMesh",
			"value": ""
		},
		{
			"key": "epMsgServiceIds",
			"value": ""
		},
		{
			"key": "epStudentMsgServiceIdsTransfer",
			"value": ""
		},
		{
			"key": "epStudentApplicationNamesTransfer",
			"value": ""
		},
		{
			"key": "epSchemaContentsTransfer",
			"value": ""
		},
		{
			"key": "epEventTopicsTransfer",
			"value": ""
		},
		{
			"key": "confluentClusterIdsTransfer",
			"value": ""
		},
		{
			"key": "confluentClusterEndpointsTransfer",
			"value": ""
		},
		{
			"key": "confluentClusterBootstrapsTransfer",
			"value": ""
		},
		{
			"key": "confluentClusterApiKeysTransfer",
			"value": ""
		},
		{
			"key": "confluentSchemaRegistryApiSecretsTransfer",
			"value": ""
		},
		{
			"key": "confluentSchemaRegistryIdsTransfer",
			"value": ""
		},
		{
			"key": "confluentSchemaRegistryEndpointsTransfer",
			"value": ""
		},
		{
			"key": "confluentSchemaRegistryApiKeysTransfer",
			"value": ""
		},
		{
			"key": "epStudentMsgServiceId",
			"value": "sample"
		},
		{
			"key": "epStudentEventMeshIdsTransfer",
			"value": ""
		},
		{
			"key": "epStudentEventMeshId",
			"value": ""
		},
		{
			"key": "confluentClusterBootstraps",
			"value": ""
		},
		{
			"key": "confluentClusterBootstrap",
			"value": ""
		},
		{
			"key": "epEventVersionId",
			"value": ""
		},
		{
			"key": "confluentClusterApiSecretsTransfer",
			"value": ""
		},
		{
			"key": "epApplicationToTopicMapTransfer",
			"value": ""
		},
		{
			"key": "epApplicationToConsumerGroupsMap",
			"value": ""
		},
		{
			"key": "confluentSchemaType",
			"value": ""
		},
		{
			"key": "confluentClusterAdminApiKey",
			"value": ""
		},
		{
			"key": "solaceSempUser",
			"value": ""
		},
		{
			"key": "solaceMsgVpn",
			"value": ""
		},
		{
			"key": "solaceSempUrl",
			"value": ""
		},
		{
			"key": "solaceSempPassword",
			"value": "",
			"type": "string"
		},
		{
			"key": "epStudentKafkaMsgServiceIdsTransfer",
			"value": ""
		},
		{
			"key": "epStudentKafkaEventMeshIdsTransfer",
			"value": ""
		},
		{
			"key": "epStudentSolaceMsgServiceIdsTransfer",
			"value": ""
		},
		{
			"key": "epStudentSolaceEventMeshIdsTransfer",
			"value": ""
		},
		{
			"key": "solaceMsgVpnName",
			"value": ""
		},
		{
			"key": "solaceQueueName",
			"value": ""
		},
		{
			"key": "solaceTopic",
			"value": ""
		},
		{
			"key": "epApplicationVersionIds",
			"value": "",
			"type": "string"
		},
		{
			"key": "epQueueConsumerId",
			"value": ""
		},
		{
			"key": "epQueueConsumerName",
			"value": ""
		}
	]
}